[{"/home/max/WebProjects/work/restaurant-backend/src/index.ts":"1","/home/max/WebProjects/work/restaurant-backend/src/constants.ts":"2","/home/max/WebProjects/work/restaurant-backend/src/controllers/auth.ts":"3","/home/max/WebProjects/work/restaurant-backend/src/controllers/menu.ts":"4","/home/max/WebProjects/work/restaurant-backend/src/controllers/orders.ts":"5","/home/max/WebProjects/work/restaurant-backend/src/controllers/staff.ts":"6","/home/max/WebProjects/work/restaurant-backend/src/controllers/tables.ts":"7","/home/max/WebProjects/work/restaurant-backend/src/models/Menu.ts":"8","/home/max/WebProjects/work/restaurant-backend/src/models/Order.ts":"9","/home/max/WebProjects/work/restaurant-backend/src/models/Staff.ts":"10","/home/max/WebProjects/work/restaurant-backend/src/models/Table.ts":"11","/home/max/WebProjects/work/restaurant-backend/src/routers/auth.ts":"12","/home/max/WebProjects/work/restaurant-backend/src/routers/index.ts":"13","/home/max/WebProjects/work/restaurant-backend/src/routers/menu.ts":"14","/home/max/WebProjects/work/restaurant-backend/src/routers/orders.ts":"15","/home/max/WebProjects/work/restaurant-backend/src/routers/staff.ts":"16","/home/max/WebProjects/work/restaurant-backend/src/routers/tables.ts":"17"},{"size":816,"mtime":1687544021202,"results":"18","hashOfConfig":"19"},{"size":165,"mtime":1687708857887,"results":"20","hashOfConfig":"19"},{"size":3853,"mtime":1687748209426,"results":"21","hashOfConfig":"19"},{"size":1302,"mtime":1687695362280,"results":"22","hashOfConfig":"19"},{"size":1167,"mtime":1687745994788,"results":"23","hashOfConfig":"19"},{"size":4179,"mtime":1687754816482,"results":"24","hashOfConfig":"19"},{"size":1467,"mtime":1687748209422,"results":"25","hashOfConfig":"19"},{"size":511,"mtime":1687695446185,"results":"26","hashOfConfig":"19"},{"size":532,"mtime":1687736468397,"results":"27","hashOfConfig":"19"},{"size":722,"mtime":1687746938697,"results":"28","hashOfConfig":"19"},{"size":665,"mtime":1687746938701,"results":"29","hashOfConfig":"19"},{"size":271,"mtime":1687689521298,"results":"30","hashOfConfig":"19"},{"size":377,"mtime":1687705228274,"results":"31","hashOfConfig":"19"},{"size":316,"mtime":1687695138606,"results":"32","hashOfConfig":"19"},{"size":343,"mtime":1687746013000,"results":"33","hashOfConfig":"19"},{"size":970,"mtime":1687748209430,"results":"34","hashOfConfig":"19"},{"size":501,"mtime":1687749336606,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1elv3ck",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/max/WebProjects/work/restaurant-backend/src/index.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/constants.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/controllers/auth.ts",["91","92","93","94","95","96"],[],"import { NextFunction, Request, Response } from 'express'\nimport jwt from 'jsonwebtoken'\nimport bcrypt from 'bcrypt'\n\nimport { staffModel } from '../models/Staff'\n\nconst SECRET = 'restaurant'\n\ninterface ITokenPayload {\n    username: string\n    role: string\n}\n\ninterface IRegBody {\n    username: string\n    password: string\n    role: string\n}\n\ninterface ILogin {\n    username: string\n    password: string\n}\n\nclass Auth {\n    static generateAccessToken(data: ITokenPayload): string {\n        return jwt.sign(data, SECRET, { expiresIn: '2h' })\n    }\n\n    private static getToken(req: Request) {\n        const authHeader = req.headers['authorization'] || ''\n\n        return authHeader && authHeader.split(' ')[0] == 'Bearer' ?\n            authHeader.split(\" \")[1] :\n            false;\n    }\n\n    static async isWaiter(req: Request, res: Response, next: NextFunction) {\n        const role = res.locals.staff.role\n        if (role != 'waiter')\n            return res.status(401).json({ msg: 'Access denied' })\n        return next()\n    }\n\n    static async isMaker(req: Request, res: Response, next: NextFunction) {\n        const role = res.locals.staff.role\n        if (role != 'cooker' && role != 'bartender')\n            return res.status(401).json({ msg: 'Access denied' })\n        return next()\n    }\n\n    static async isCashier(req: Request, res: Response, next: NextFunction) {\n        const role = res.locals.staff.role\n        if (role != 'cashier')\n            return res.status(401).json({ msg: 'Access denied' })\n        return next()\n    }\n\n    static async verify(req: Request, res: Response, next: NextFunction) {\n        const token = Auth.getToken(req)\n\n        if (token == false)\n            return res.status(401).json({ verify: false })\n\n        try {\n            const data = jwt.verify(token, SECRET) as ITokenPayload\n            const users = await staffModel.find({\n                username: data.username,\n                role: data.role\n            })\n\n            if (users.length == 0)\n                return res.status(403).json({ verify: false })\n\n            res.locals.staff = users[0]\n            return next()\n        } catch (err) {\n            return res.status(403).json({ verify: false, msg: 'Access denied' })\n        }\n    }\n\n    static async login(req: Request<any, any, any, ILogin>, res: Response) {\n        try {\n            const users = await staffModel.find({username: req.body.username})\n            if (users.length == 0)\n                return res.json({isAuth: false, msg: 'Doesn\\'t exists'})\n            if (!bcrypt.compareSync(req.body.password, users[0].pwd))\n                return res.json({isAuth: false, msg: 'Doesn\\'t correct password'})\n            const token = Auth.generateAccessToken({\n                role: users[0].role,\n                username: req.body.username\n            })\n\n            return res.json({ isAuth: true, token: token, username: users[0].username, role: users[0].role })\n        } catch (err) {\n            return res.status(300).json({ isAuth: false, msg: 'Something went wrong' })\n        }\n    }\n\n    static async signup(req: Request<any, any, any, IRegBody>, res: Response) {\n        try {\n            const usernames = await staffModel.find({ username: req.body.username })\n            if (usernames.length == 0) {\n                const hashPassword = bcrypt.hashSync(req.body.password, 8)\n                await staffModel.create({\n                    role: req.body.role,\n                    username: req.body.username,\n                    pwd: hashPassword\n                })\n\n                return res.json({ status: true })\n            }\n            return res.status(400).json({ status: false, msg: 'Already exists' })\n        } catch (e) {\n            console.log(e)\n            return res.status(400).json({ status: false })\n        }\n    }\n}\n\nexport { Auth }","/home/max/WebProjects/work/restaurant-backend/src/controllers/menu.ts",["97","98","99","100"],[],"import { Request, Response } from 'express'\nimport {IMenuItem, menuModel} from \"../models/Menu\";\n\nexport class Menu {\n    static async getAll(req: Request, res: Response) {\n        try {\n            const data: IMenuItem[] = await menuModel.find({})\n            return res.json(data)\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n\n    static async getBeverages(req: Request, res: Response) {\n        try {\n            const data: IMenuItem[] = await menuModel.find({ type: 'beverage' })\n            return res.json(data)\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n\n    static async getDishes(req: Request, res: Response) {\n        try {\n            const data: IMenuItem[] = await menuModel.find({ type: 'dish' })\n            return res.json(data)\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n\n    static async setItem(req: Request<any, any, any, any, IMenuItem>, res: Response) {\n        try {\n            console.log(req.body)\n            await menuModel.create({\n                ...req.body\n            })\n            return res.json({ error: false })\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n}","/home/max/WebProjects/work/restaurant-backend/src/controllers/orders.ts",["101","102","103","104"],[],"import { Request, Response } from \"express\";\nimport {orderModel} from \"../models/Order\";\nimport {STATUS_ON_HOLD} from \"../constants\";\nimport {tableModel} from \"../models/Table\";\n\ninterface IOrderBody {\n    table: string,\n    menu: string\n}\n\n\nclass Orders {\n    static async getActiveOrders(req: Request, res: Response) {\n        try {\n            const orders = await orderModel.find({status: {$ne: 'completed'}}).populate(['menuId', 'tableId'])\n            return res.json(orders)\n        } catch(e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n\n    static async createOrder(req: Request<any, any, any, any, IOrderBody>, res: Response) {\n        try {\n            await orderModel.create({\n                status: STATUS_ON_HOLD,\n                tableId: req.body.table,\n                menuId: req.body.menu\n            })\n            await tableModel.updateOne({_id: req.body.table}, {\n                $inc: {\n                    orders: 1\n                }\n            })\n            return res.json({ error: false })\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n}\n\nexport { Orders }","/home/max/WebProjects/work/restaurant-backend/src/controllers/staff.ts",[],["105"],"/home/max/WebProjects/work/restaurant-backend/src/controllers/tables.ts",["106","107","108","109"],[],"import { Request, Response } from \"express\";\n\nimport { tableModel } from \"../models/Table\";\nimport {orderModel} from \"../models/Order\";\n\ninterface IAllTablesBody {\n    seats: number,\n    name: string\n}\n\n\nclass Tables {\n    static async getTables(req: Request, res: Response) {\n        try {\n            const result = await tableModel.find({})\n            return res.json(result)\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n\n    static async createTable(req: Request<any, any, any, any, IAllTablesBody>, res: Response) {\n        try {\n            await tableModel.create({\n                seats: req.body.seats,\n                name: req.body.name\n            })\n            return res.json({ error: false })\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n\n    static async getOrders(req: Request, res: Response) {\n        try {\n            const tableOrders = await orderModel.find({tableId: req.body.table}).populate('menuId')\n            return res.json(tableOrders)\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n\n    static async getTablesIncome(req: Request, res: Response) {\n        try {\n            const tables = await tableModel.find({}, ['name', 'income'])\n            return res.json(tables)\n        } catch (e) {\n            return res.status(400).json({ error: true })\n        }\n    }\n}\n\nexport { Tables }","/home/max/WebProjects/work/restaurant-backend/src/models/Menu.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/models/Order.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/models/Staff.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/models/Table.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/routers/auth.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/routers/index.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/routers/menu.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/routers/orders.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/routers/staff.ts",[],[],"/home/max/WebProjects/work/restaurant-backend/src/routers/tables.ts",[],[],{"ruleId":"110","severity":1,"message":"111","line":82,"column":37,"nodeType":"112","messageId":"113","endLine":82,"endColumn":40,"suggestions":"114"},{"ruleId":"110","severity":1,"message":"111","line":82,"column":42,"nodeType":"112","messageId":"113","endLine":82,"endColumn":45,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"111","line":82,"column":47,"nodeType":"112","messageId":"113","endLine":82,"endColumn":50,"suggestions":"116"},{"ruleId":"110","severity":1,"message":"111","line":100,"column":38,"nodeType":"112","messageId":"113","endLine":100,"endColumn":41,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"111","line":100,"column":43,"nodeType":"112","messageId":"113","endLine":100,"endColumn":46,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"111","line":100,"column":48,"nodeType":"112","messageId":"113","endLine":100,"endColumn":51,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"111","line":32,"column":39,"nodeType":"112","messageId":"113","endLine":32,"endColumn":42,"suggestions":"120"},{"ruleId":"110","severity":1,"message":"111","line":32,"column":44,"nodeType":"112","messageId":"113","endLine":32,"endColumn":47,"suggestions":"121"},{"ruleId":"110","severity":1,"message":"111","line":32,"column":49,"nodeType":"112","messageId":"113","endLine":32,"endColumn":52,"suggestions":"122"},{"ruleId":"110","severity":1,"message":"111","line":32,"column":54,"nodeType":"112","messageId":"113","endLine":32,"endColumn":57,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":43,"nodeType":"112","messageId":"113","endLine":22,"endColumn":46,"suggestions":"124"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":48,"nodeType":"112","messageId":"113","endLine":22,"endColumn":51,"suggestions":"125"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":53,"nodeType":"112","messageId":"113","endLine":22,"endColumn":56,"suggestions":"126"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":58,"nodeType":"112","messageId":"113","endLine":22,"endColumn":61,"suggestions":"127"},{"ruleId":"128","severity":2,"message":"129","line":103,"column":17,"nodeType":"130","messageId":"131","endLine":103,"endColumn":30,"suppressions":"132"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":43,"nodeType":"112","messageId":"113","endLine":22,"endColumn":46,"suggestions":"133"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":48,"nodeType":"112","messageId":"113","endLine":22,"endColumn":51,"suggestions":"134"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":53,"nodeType":"112","messageId":"113","endLine":22,"endColumn":56,"suggestions":"135"},{"ruleId":"110","severity":1,"message":"111","line":22,"column":58,"nodeType":"112","messageId":"113","endLine":22,"endColumn":61,"suggestions":"136"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["137","138"],["139","140"],["141","142"],["143","144"],["145","146"],["147","148"],["149","150"],["151","152"],["153","154"],["155","156"],["157","158"],["159","160"],["161","162"],["163","164"],"@typescript-eslint/ban-ts-comment","Do not use \"@ts-ignore\" because it alters compilation errors.","Line","tsDirectiveComment",["165"],["166","167"],["168","169"],["170","171"],["172","173"],{"messageId":"174","fix":"175","desc":"176"},{"messageId":"177","fix":"178","desc":"179"},{"messageId":"174","fix":"180","desc":"176"},{"messageId":"177","fix":"181","desc":"179"},{"messageId":"174","fix":"182","desc":"176"},{"messageId":"177","fix":"183","desc":"179"},{"messageId":"174","fix":"184","desc":"176"},{"messageId":"177","fix":"185","desc":"179"},{"messageId":"174","fix":"186","desc":"176"},{"messageId":"177","fix":"187","desc":"179"},{"messageId":"174","fix":"188","desc":"176"},{"messageId":"177","fix":"189","desc":"179"},{"messageId":"174","fix":"190","desc":"176"},{"messageId":"177","fix":"191","desc":"179"},{"messageId":"174","fix":"192","desc":"176"},{"messageId":"177","fix":"193","desc":"179"},{"messageId":"174","fix":"194","desc":"176"},{"messageId":"177","fix":"195","desc":"179"},{"messageId":"174","fix":"196","desc":"176"},{"messageId":"177","fix":"197","desc":"179"},{"messageId":"174","fix":"198","desc":"176"},{"messageId":"177","fix":"199","desc":"179"},{"messageId":"174","fix":"200","desc":"176"},{"messageId":"177","fix":"201","desc":"179"},{"messageId":"174","fix":"202","desc":"176"},{"messageId":"177","fix":"203","desc":"179"},{"messageId":"174","fix":"204","desc":"176"},{"messageId":"177","fix":"205","desc":"179"},{"kind":"206","justification":"207"},{"messageId":"174","fix":"208","desc":"176"},{"messageId":"177","fix":"209","desc":"179"},{"messageId":"174","fix":"210","desc":"176"},{"messageId":"177","fix":"211","desc":"179"},{"messageId":"174","fix":"212","desc":"176"},{"messageId":"177","fix":"213","desc":"179"},{"messageId":"174","fix":"214","desc":"176"},{"messageId":"177","fix":"215","desc":"179"},"suggestUnknown",{"range":"216","text":"217"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"216","text":"218"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"219","text":"217"},{"range":"219","text":"218"},{"range":"220","text":"217"},{"range":"220","text":"218"},{"range":"221","text":"217"},{"range":"221","text":"218"},{"range":"222","text":"217"},{"range":"222","text":"218"},{"range":"223","text":"217"},{"range":"223","text":"218"},{"range":"224","text":"217"},{"range":"224","text":"218"},{"range":"225","text":"217"},{"range":"225","text":"218"},{"range":"226","text":"217"},{"range":"226","text":"218"},{"range":"227","text":"217"},{"range":"227","text":"218"},{"range":"228","text":"217"},{"range":"228","text":"218"},{"range":"229","text":"217"},{"range":"229","text":"218"},{"range":"230","text":"217"},{"range":"230","text":"218"},{"range":"231","text":"217"},{"range":"231","text":"218"},"directive","",{"range":"232","text":"217"},{"range":"232","text":"218"},{"range":"233","text":"217"},{"range":"233","text":"218"},{"range":"234","text":"217"},{"range":"234","text":"218"},{"range":"235","text":"217"},{"range":"235","text":"218"},[2296,2299],"unknown","never",[2301,2304],[2306,2309],[3117,3120],[3122,3125],[3127,3130],[983,986],[988,991],[993,996],[998,1001],[619,622],[624,627],[629,632],[634,637],[518,521],[523,526],[528,531],[533,536]]